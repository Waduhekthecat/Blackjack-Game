[{"/home/josh/projects/llth-blackjack/blackjack/src/index.js":"1","/home/josh/projects/llth-blackjack/blackjack/src/App.js":"2","/home/josh/projects/llth-blackjack/blackjack/src/blackjack/Game.js":"3","/home/josh/projects/llth-blackjack/blackjack/src/blackjack/cards/DealCards.js":"4","/home/josh/projects/llth-blackjack/blackjack/src/blackjack/cards/Card.js":"5","/home/josh/projects/llth-blackjack/blackjack/src/blackjack/UI/Scores.js":"6","/home/josh/projects/llth-blackjack/blackjack/src/blackjack/cards/Deck.js":"7","/home/josh/projects/llth-blackjack/blackjack/src/blackjack/UI/Leave.js":"8","/home/josh/projects/llth-blackjack/blackjack/src/blackjack/UI/Displays.js":"9","/home/josh/projects/llth-blackjack/blackjack/src/blackjack/player/Actions.js":"10","/home/josh/projects/llth-blackjack/blackjack/src/blackjack/UI/Visuals.js":"11","/home/josh/projects/llth-blackjack/blackjack/src/blackjack/cards/RenderCard.js":"12","/home/josh/projects/llth-blackjack/blackjack/src/blackjack/UI/Bet.js":"13"},{"size":254,"mtime":1649826501772,"results":"14","hashOfConfig":"15"},{"size":755,"mtime":1649878377419,"results":"16","hashOfConfig":"15"},{"size":17590,"mtime":1650092327062,"results":"17","hashOfConfig":"15"},{"size":918,"mtime":1649896149204,"results":"18","hashOfConfig":"15"},{"size":489,"mtime":1649826545529,"results":"19","hashOfConfig":"15"},{"size":914,"mtime":1649896223493,"results":"20","hashOfConfig":"15"},{"size":377,"mtime":1649826432412,"results":"21","hashOfConfig":"15"},{"size":1009,"mtime":1649827203813,"results":"22","hashOfConfig":"15"},{"size":2258,"mtime":1650092567647,"results":"23","hashOfConfig":"15"},{"size":1871,"mtime":1649898133005,"results":"24","hashOfConfig":"15"},{"size":1491,"mtime":1649896916930,"results":"25","hashOfConfig":"15"},{"size":3605,"mtime":1649896609720,"results":"26","hashOfConfig":"15"},{"size":5736,"mtime":1649897844493,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1m2828o",{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/josh/projects/llth-blackjack/blackjack/src/index.js",[],[],"/home/josh/projects/llth-blackjack/blackjack/src/App.js",[],[],"/home/josh/projects/llth-blackjack/blackjack/src/blackjack/Game.js",["68","69","70","71","72","73"],[],"import React, { useState, useEffect } from \"react\"\nimport { Grid } from \"@mui/material/\";\nimport styledCom from 'styled-components';\n\nimport Deck from \"./cards/Deck.js\";\nimport Card from \"./cards/RenderCard.js\";\nimport DealCards from \"./cards/DealCards.js\";\nimport ActionBtns from \"./player/Actions.js\";\nimport Scores from \"./UI/Scores.js\";\nimport Visuals from \"./UI/Visuals.js\";\n    import Win from '../imgs/gifs/_blowing_kiss[window]4x.gif';\n    import Lose from '../imgs/gifs/_laughing_devil[window]4x.gif';\n\n// Core Game Component\nconst Game = () => {\n\n//   // Initializes and holds game state\n  const GameState = {\n    bet: 'bet',\n    init: 'init',\n    playerTurn: 'playerTurn',\n    dealerTurn: 'dealerTurn',\n  };\n  const Deal = {\n    player: 'player',\n    dealer: 'dealer',\n    hidden: 'hidden',\n  };\n  const Results = {\n    blackjack: 'blackjack',\n    playerWins: 'playerWins',\n    dealerWins: 'dealerWins',\n    playerBusts: 'playerBusts',\n    dealerBusts: 'dealerBusts',\n    push: 'push',\n  };\n\n  const [gameState, setGameState] = useState(GameState.bet);\n  const [game, setGame] = useState(\"placeBets\");  \n  const [balance, setBalance] = useState(5000);\n  const [betSize, setBetSize] = useState(0);\n  const [deck, setDeck] = useState(Deck);\n  const [hiddenCard, setHiddenCard] = useState([]);\n  const [dealerHand, setDealerHand] = useState([]);\n  const [dealerScore, setDealerScore] = useState(0);\n  const [playerHand, setPlayerHand] = useState([]);\n  const [playerScore, setPlayerScore] = useState(0);\n  const [dealerCount, setDealerCount] = useState(0);\n  const [playerCount, setPlayerCount] = useState(0);\n  const [message, setMessage] = useState(\"\");\n  const [animation, setAnimation] = useState(\"\");\n\n  // Initialize Game\n  useEffect(() => {\n    if (gameState === GameState.init) {\n      dealHands();\n      setGameState(GameState.playerTurn); \n    }\n  }, [gameState]);\n\n  // Update scores\n  useEffect(() => {\n    calculate(dealerHand, setDealerScore);\n    setDealerCount(dealerCount + 1)\n  }, [dealerHand, hiddenCard]);\n\n  useEffect(() => {\n    calculate(playerHand, setPlayerScore);\n    setPlayerCount(playerCount + 1)\n  }, [playerHand]);\n\n  // Player turn\n  useEffect(() => {\n      if (playerCount === 2 &&  playerScore === 21 && dealerScore !==21){\n        setMessage(\"Blackjack!\")\n        setAnimation(Win);\n        setTimeout(() => reset(), [3500])\n\n      };\n      if (playerScore > 21) {\n        setGame(Results.playerBusts)\n        setTimeout(() => reset(), [3500])\n\n      };\n  }, [playerCount]);\n\n  // Dealer turn\n  useEffect(() => {\n    if(gameState === GameState.dealerTurn) {\n      if(dealerScore > 21) {\n        setGame(Results.dealerBusts)\n      } else\n        if (dealerScore >= 17 && dealerScore <= 21) {\n          checkWin();\n        }\n        else {\n          setTimeout(()=>\n          drawCard(Deal.dealer), [300])\n        }\n      }\n    }, [dealerCount]);\n\n    // handle results\n  useEffect(() => {\n    if (game === Results.blackjack) {\n    setTimeout(()=>setBalance(Math.round((balance + (betSize * 2.5)) * 100) / 100), [3500])\n    setTimeout(()=>setMessage(\"Blackjack!\"), [500])\n    setTimeout(()=>setAnimation(Win), [500])\n      setTimeout(()=> reset(), [3500]);\n  } else if (game === Results.playerBusts) {\n    setTimeout(()=>setMessage(\"Player Busted!\"), [500])\n    setTimeout(()=>setAnimation(Lose), [500])\n      setTimeout(()=> reset(), [3500]);\n  } else if (game === Results.dealerBusts) {\n    setTimeout(()=>setBalance(Math.round((balance + (betSize * 2)) * 100) / 100), [3500])\n    setTimeout(()=>setMessage(\"Dealer Busted!\"), [500])\n    setTimeout(()=>setAnimation(Win), [500])\n      setTimeout(()=> reset(), [3500]);\n  } else if (game === Results.playerWins) {\n    setTimeout(()=>setBalance(Math.round((balance + (betSize * 2)) * 100) / 100), [3500])\n    setTimeout(()=>setMessage(\"Player Wins!\"), [500])\n    setTimeout(()=>setAnimation(Win), [500])\n      setTimeout(()=> reset(), [3500]);\n  } else if (game === Results.dealerWins) {\n    setTimeout(()=>setMessage(\"Dealer Wins!\"), [500])\n    setTimeout(()=>setAnimation(Lose), [500])\n      setTimeout(()=> reset(), [3500]);\n  } else if (game === Results.push) {\n    setTimeout(()=>setBalance(Math.round((balance + (betSize * 1)) * 100) / 100), [3500])\n    setTimeout(()=>setMessage(\"Push!\"), [500])\n      setTimeout(()=> reset(), [3500]);\n    }\n}, [game]);\n  \n // Game functions\nconst shuffle = () => {\n  let newDeck = JSON.parse(JSON.stringify(Deck))\n    return (\n      setDeck(newDeck)\n    )\n  };\n  const handleClear = () => {\n    setBetSize(0)\n  };\n  const handleMax = () => {\n    setBetSize(balance)\n  };\n  const handleClick = (e) => {\n    let value = (e.target.value);\n    if (parseInt(betSize)+parseInt(value) > parseInt(balance)){\n      alert(\"Not Enough Minerals\");\n    } else {\n    setBetSize(parseInt(betSize)+parseInt(value))};\n  };\n  const dealHands = () => {\n    setTimeout(() => drawCard(Deal.player), [800])\n    setTimeout(() => drawCard(Deal.hidden), [1300])\n    setTimeout(() => drawCard(Deal.player), [1800])\n    setTimeout(() => drawCard(Deal.dealer), [2300])\n    setTimeout(() => setGame(\"inProgress\"), [2800])\n  };\n  const drawCard = (dealType) => {\n    if (deck.length > 5) {\n      const randomIndex = Math.floor(Math.random() * deck.length);\n      var card = deck[randomIndex];\n      deck.splice(randomIndex, 1);\n      setDeck([...deck]);\n      console.log(card, 'Remaining Cards:', deck.length);\n      dealCard(dealType, card)\n    }; \n    if (deck.length <= 5){\n    shuffle();\n    dealCard(dealType, card);\n    }\n  };\n  const dealCard = (dealType, card) => {\n    switch (dealType) {\n      case Deal.player:\n        playerHand.push(card);\n        setPlayerHand([...playerHand]);\n        break;\n      case Deal.dealer:\n        dealerHand.push(card);\n        setDealerHand([...dealerHand]);\n        break;\n      case Deal.hidden:\n        hiddenCard.push(card);\n        setHiddenCard([...hiddenCard]);\n        break;\n      default:\n        break;\n    }\n  };\n  const revealCard = () => {\n    let hidden = hiddenCard.pop() \n    dealerHand.push(hidden)\n    setDealerHand([...dealerHand])\n  };\n  const calculate = (cards, setScore) => {\n    let total = 0;\n    cards.forEach((card) => {\n      if (!card.includes('A')) {\n        if (card.includes('K')) {\n          total+=10\n        } else \n        if (card.includes('Q')) {\n          total+=10\n        } else\n        if (card.includes('J')) {\n          total+=10\n        } else\n        if (card.includes('T')) {\n          total+=10\n        } else {\n          total += parseInt(card);\n        };\n      };\n    });\n      const aces = cards.filter((card) => {\n        return card.includes('A');\n      });\n      aces.forEach(() => {\n        if ((total + 11) > 21) {\n          total+=1\n        } else \n        if ((total + 11) === 21) {\n          if (aces.length > 1) {\n            total+=1\n          } else {\n          total+=11\n        }\n      } else {\n          total+=11\n        }\n    })\n    setScore(total);\n  };\n  // Player actions\n  const handleHit = () => {\n    drawCard(Deal.player)\n  };\n  const handleStand = () => {\n    revealCard();\n    setGameState(GameState.dealerTurn);\n  };\n  const handleDeal = () => {\n    setGameState(GameState.init)\n    setBalance(balance - betSize)\n  };\n  const checkWin = () => {\n  if(dealerScore > playerScore) {\n    setGame(Results.dealerWins);\n  } else\n  if(dealerScore < playerScore) {\n    setGame(Results.playerWins);\n  } else\n  if(dealerScore === playerScore) {\n    setGame(Results.push);\n  };\n}\n  // Resets game state\n  const reset = () => {\n    setHiddenCard([]);\n    setPlayerHand([]);\n    setPlayerScore(0);\n    setPlayerCount(0);\n    setDealerHand([]);\n    setDealerScore(0);\n    setDealerCount(0);\n    setBetSize(0);\n    setMessage(\"\");\n    setAnimation(\"\");\n    setGame(\"placeBets\");\n    setGameState(GameState.bet)\n    };\n  \n    // console.table('Dealer: ', dealerHand)\n    // console.table('Player: ', playerHand)\n    // console.log('dealerScore: ', dealerScore)\n    // console.log('playerScore: ', playerScore)\n    // console.log('dealerCount: ', dealerCount)\n    // console.log('playerCount: ', playerCount)\n    // console.log('Game results: ', game)\n    // console.log('Game State: ', gameState)\n\n    console.log(gameState)\n  return (\n    <Container>\n      <DealerTitle>DEALER</DealerTitle>\n      <DealerHand>\n        <DealerUl>\n          {hiddenCard.map(card =>\n            <DealerLi key={card}>\n              <Card card={card} back={true} height=\"150px\"/>\n            </DealerLi>)}\n          {dealerHand.map(card =>\n            <DealerLi key={card}>\n              <Card card={card} height=\"150px\"/>\n            </DealerLi>)}\n        </DealerUl>\n      </DealerHand>\n      <DealCards \n        balance={balance}\n        betSize={betSize}\n        gameState={gameState}\n        GameState={GameState} \n          handleDeal={handleDeal}\n          />\n      <PlayerUI>\n        <ActionBtns\n          game={game}\n          GameState={GameState}\n          Results={Results}\n          dealerHand={dealerHand}\n          playerScore={playerScore}\n            handleStand={handleStand} \n            handleHit={handleHit}\n            />\n      </PlayerUI>\n      <PlayerHand>\n        <PlayerUl>\n          {playerHand.map(card => \n            <PlayerLi key={card}>\n              <Card card={card} height=\"150px\"/>\n            </PlayerLi>)}\n        </PlayerUl>\n      </PlayerHand>\n      <Scores \n        gameState={gameState}\n        GameState={GameState}\n        playerScore={playerScore}\n        dealerScore={dealerScore}/>\n     \n      <Visuals \n        game={game}\n        gameState={gameState}\n        GameState={GameState}\n        betSize={betSize}\n        balance={balance}\n        playerHand={playerHand}\n        dealerHand={dealerHand}\n          handleClear={handleClear}\n          handleMax={handleMax}\n          handleClick={handleClick}\n          /> \n      <Message><h1>{message}</h1></Message>\n      <Animation><img src={animation} alt=\"\"/></Animation>\n    </Container>\n  )\n};\n\nexport default Game;\n\nconst Message = styledCom.div`\nposition:absolute;\nbottom:15%;\ncolor:white;\n`;\n\nconst Animation = styledCom.div`\nposition:absolute;\nbottom:35%;\n`;\n\nconst PlayerUI = styledCom(Grid).attrs({\n  container: true,\n})`\n  position: absolute;\n  height: 200px;\n  bottom:-3%;\n  font-size: 18px;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  text-shadow: 0 0 10px black;\n  z-index: 29;\n  color: white;\n  font-family: \"Play\", sans-serif;\n  -webkit--select: none;\n  \n`;\n\n\n// Styled Bet Components\n\n// const Spacing = styledCom(Grid).attrs({\n//   item: true,\n// })`\n//   z-index:-10;\n// `;\n\n// const SetBetSize = styledCom(Grid).attrs({\n//   container: true,\n// })`\n//   position: absolute;\n//   width: 80%;\n//   height: 110px;\n//   margin: 0 auto;\n//   bottom: 1.5%;\n//   display: flex;\n//   color: black;\n//   justify-content: space-evenly;\n//   align-items: center;\n//   z-index: 400;\n// `;\n\n// const ClearBet = styledCom(Grid).attrs({\n//   item: true,\n// })`\n//    `;\n\n// const MaxBet = styledCom(Grid).attrs({\n//   item: true,\n// })`\n//    `;\n\n// const Grid10 = styledCom(Grid).attrs({\n//   item: true,\n// })` \n//   display:absolute;\n//   justifyContent:center;\n//   alignItems:center;\n//   width: 120px;\n//   height: 150px;\n// `;\n\n// const Grid20 = styledCom(Grid).attrs({\n//   item: true,\n// })` \n//   display:absolute;\n//   justifyContent:center;\n//   alignItems:center;\n//   width: 120px;\n//   height: 150px;\n// `;\n// const Grid50 = styledCom(Grid).attrs({\n//   item: true,\n// })`\n//   display:absolute;\n//   justifyContent:center;\n//   alignItems:center;\n//   width: 120px;\n//   height: 150px;\n// `;\n\n// const Grid100 = styledCom(Grid).attrs({\n//   item: true,\n// })` \n//   display:absolute;\n//   justifyContent:center;\n//   alignItems:center;\n//   width: 120px;\n//   height: 150px;\n// `;\n\n// const Bet10 = styledCom(Bet_10)`\n//   transform: scale(1.1);\n//     @media (max-width: 1450px) {\n//       transform: scale(1.0);\n//     }\n//     @media (max-width: 1200px) {\n//       transform: scale(0.9);\n//     }\n// `;\n\n// const Bet20 = styledCom(Bet_20)`\n//   transform: scale(1.1);  \n//     @media (max-width: 1450px) {\n//       transform: scale(1.0);\n//     }\n//     @media (max-width: 1200px) {\n//       transform: scale(0.9);\n//     }\n// `;\n\n// const Bet50 = styledCom(Bet_50)`\n//   transform: scale(1.1);  \n//     @media (max-width: 1450px) {\n//       transform: scale(1.0);\n//     }\n//     @media (max-width: 1200px) {\n//       transform: scale(0.9);\n//     }\n// `;\n\n// const Bet100 = styledCom(Bet_100)`\n//   transform: scale(1.1);\n//     @media (max-width: 1450px) {\n//       transform: scale(1.0);\n//     }\n//     @media (max-width: 1200px) {\n//       transform: scale(0.9);\n//     }\n// `;\n\n// const PlaceBetBtn = styledCom.button`\n//   transform: scale(1);\n//   background: transparent;\n//   width: 100px;\n//   height: 100px;\n//   outline: none;\n//   color: white;\n//   border: none;\n//   cursor: pointer;\n//   user-select: none;\n//   font-family: \"Play\", sans-serif;\n//   -webkit-user-select: none;\n//     &:hover {\n//         transform: scale(1.1);\n//     }\n//     &:active {\n//         transform: scale(1);\n//     }\n//       @media (max-width: 1450px) {\n//         transform: scale(1.0);\n//       }\n//       @media (max-width: 1200px) {\n//         transform: scale(0.9);\n//       }\n// `;\n\n// const ClearBtn = styledCom.button`\n//   background: transparent;\n//   outline: none;\n//   border: none;\n//   cursor: pointer;\n//   user-select: none;\n//   font-family: \"Play\", sans-serif;\n//   -webkit-user-select: none;\n//     &:hover {\n//       transform: scale(1.1);\n//     }\n//     &:active {\n//         transform: scale(0.9);\n//     }\n\n//       @media (max-width: 1450px) {\n//         transform: scale(1.0);\n//       }\n//       @media (max-width: 1200px) {\n//         transform: scale(0.9);\n//       }\n// `;\n// const MaxBetBtn = styledCom.button`\n//   background: transparent;\n//   outline: none;\n//   border: none;\n//   cursor: pointer;\n//   user-select: none;\n//   -webkit-user-select: none;\n//     &:hover {\n//       transform: scale(1.1);\n//     }\n//     &:active {\n//         transform: scale(0.9);\n//     }\n//       @media (max-width: 1450px) {\n//         transform: scale(1.0);\n//       }\n//       @media (max-width: 1200px) {\n//         transform: scale(0.9);\n//       }\n// `;\n\n// Styled Chips Components\n\n// const Chip10 = styledCom.img.attrs({\n//   visibility: \"visible\",\n//   src: Svg10,\n// })`\n//   transform: scale(0.7);\n//   position: absolute;\n//   transform: ${(props) =>\n//     props.one === \"0\" ? \"translateY(-0px)\" : \n//     props.one === \"1\" ? \"translateY(-12px)\" : \n//     props.one === \"2\" ? \"translateY(-24px)\" : \n//     \"translateY(-36px)\"};\n//   bottom:-250px;\n//   margin-left:-20px;\n//   z-index: 8;\n// `;\n\n// const Chip20 = styledCom.img.attrs({\n//   visibility: \"visible\",\n//   src: Svg20,\n// })`transform: scale(0.7);\n//   position: absolute;\n//   transform: ${(props) =>\n//     props.one === \"0\" ? \"translateY(-0px)\" : \n//     props.one === \"1\" ? \"translateY(-12px)\" : \n//     props.one === \"2\" ? \"translateY(-24px)\" : \n//     \"translateY(-36px)\"};\n//   margin-left: -80px;\n//   bottom: -200px;\n//   z-index: 6;\n// `;\n\n// const Chip50 = styledCom.img.attrs({\n//   visibility: \"visible\",\n//   src: Svg50,\n// })`\n//   transform: scale(0.7);\n//   position: absolute;\n//   transform: \n//     ${(props) =>\n//     props.one === \"0\" ? \"translateY(-0px)\" : \n//     props.one === \"1\" ? \"translateY(-12px)\" : \n//     props.one === \"2\" ? \"translateY(-24px)\" : \n//     \"translateY(-36px)\"};\n//   margin-left: -155px;\n//   bottom: -135px;\n//   z-index: 4;\n// `;\n\n// const Chip100 = styledCom.img.attrs({\n//   visibility: \"visible\",\n//   src: Svg100,\n// })`\n//   transform: scale(0.7);\n//   position: absolute;\n//   transform: \n//     ${(props) =>\n//     props.one === \"0\" ? \"translateY(-0px)\" : \n//     props.one === \"1\" ? \"translateY(-12px)\" : \n//     props.one === \"2\" ? \"translateY(-24px)\" : \n//   \"translateY(-36px)\"};\n//   margin-left: -240px;\n//   bottom: -45px;\n//   z-index: 2;\n// `;\n\n// const ChipsArea = styledCom(Grid).attrs({\n//   container: true, spacing: 8,\n// })`\n//   position: absolute;\n//   height:100px;\n//   bottom: 20%;\n//   display: inline-block;\n//   justify-content: center;\n//   align-items: center;\n//   pointer-events: none;\n// `;\n\n// const PlaceChip10 = styledCom(Grid).attrs({\n//   item: true,\n// })`\n//   width: 100px;\n//   height: 200px;\n// `;\n\n// const PlaceChip20 = styledCom(Grid).attrs({\n//   item: true,\n// })`\n//   width: 100px;\n//   height: 200px;\n// `;\n\n// const PlaceChip50 = styledCom(Grid).attrs({\n//   item: true,\n// })`\n//   width: 100px;\n//   height: 200px;\n// `;\n\n// const PlaceChip100 = styledCom(Grid).attrs({\n//   item: true,\n// })`\n//   width: 100px;\n//   height: 200px;\n// `;\n\n\n\n\n// Styled Dealer Components\nconst DealerTitle = styledCom.h1`\nfont: 18px;\ncolor: white;\n`;\n\nconst DealerHand = styledCom.div`\ndisplay: flex;\njustify-content: center;\nposition: absolute;\nheight: 140px;\nwidth: 100%;\ntop: 10%;\n`;\n\nconst DealerUl = styledCom.ul`\nlist-style: none;\n`;\n\nconst DealerLi = styledCom.li`\ndisplay: inline-block;\nmargin: 0 0 0 -20px;\n`;\n\n// Styled Player Components\n\nconst PlayerHand = styledCom.div`\ndisplay: flex;\njustify-content: center;\nposition: absolute;\nheight: 140px;\nwidth: 100%;\nbottom: 30%;\n`;\n\nconst PlayerUl = styledCom.ul`\nlist-style: none;\n`;\n\nconst PlayerLi = styledCom.li`\ndisplay: inline-block;\nmargin: 0 0 0 -20px;\n`;\n\nconst Container = styledCom.div`\ndisplay:flex;\njustify-content:center;\nposition:absolute;\nheight:100px;\nwidth:100%;\nheight:100%;\n}\n`;\n","/home/josh/projects/llth-blackjack/blackjack/src/blackjack/cards/DealCards.js",[],[],"/home/josh/projects/llth-blackjack/blackjack/src/blackjack/cards/Card.js",[],[],"/home/josh/projects/llth-blackjack/blackjack/src/blackjack/UI/Scores.js",[],[],"/home/josh/projects/llth-blackjack/blackjack/src/blackjack/cards/Deck.js",[],[],"/home/josh/projects/llth-blackjack/blackjack/src/blackjack/UI/Leave.js",[],[],"/home/josh/projects/llth-blackjack/blackjack/src/blackjack/UI/Displays.js",[],[],"/home/josh/projects/llth-blackjack/blackjack/src/blackjack/player/Actions.js",[],[],"/home/josh/projects/llth-blackjack/blackjack/src/blackjack/UI/Visuals.js",[],[],"/home/josh/projects/llth-blackjack/blackjack/src/blackjack/cards/RenderCard.js",[],[],"/home/josh/projects/llth-blackjack/blackjack/src/blackjack/UI/Bet.js",[],[],{"ruleId":"74","severity":1,"message":"75","line":59,"column":6,"nodeType":"76","endLine":59,"endColumn":17,"suggestions":"77"},{"ruleId":"74","severity":1,"message":"78","line":65,"column":6,"nodeType":"76","endLine":65,"endColumn":30,"suggestions":"79"},{"ruleId":"74","severity":1,"message":"80","line":70,"column":6,"nodeType":"76","endLine":70,"endColumn":18,"suggestions":"81"},{"ruleId":"74","severity":1,"message":"82","line":85,"column":6,"nodeType":"76","endLine":85,"endColumn":19,"suggestions":"83"},{"ruleId":"74","severity":1,"message":"84","line":101,"column":8,"nodeType":"76","endLine":101,"endColumn":21,"suggestions":"85"},{"ruleId":"74","severity":1,"message":"86","line":133,"column":4,"nodeType":"76","endLine":133,"endColumn":10,"suggestions":"87"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'GameState.init', 'GameState.playerTurn', and 'dealHands'. Either include them or remove the dependency array.","ArrayExpression",["88"],"React Hook useEffect has a missing dependency: 'dealerCount'. Either include it or remove the dependency array. You can also do a functional update 'setDealerCount(d => ...)' if you only need 'dealerCount' in the 'setDealerCount' call.",["89"],"React Hook useEffect has a missing dependency: 'playerCount'. Either include it or remove the dependency array. You can also do a functional update 'setPlayerCount(p => ...)' if you only need 'playerCount' in the 'setPlayerCount' call.",["90"],"React Hook useEffect has missing dependencies: 'Results.playerBusts', 'dealerScore', 'playerScore', and 'reset'. Either include them or remove the dependency array.",["91"],"React Hook useEffect has missing dependencies: 'Deal.dealer', 'GameState.dealerTurn', 'Results.dealerBusts', 'checkWin', 'dealerScore', 'drawCard', and 'gameState'. Either include them or remove the dependency array.",["92"],"React Hook useEffect has missing dependencies: 'Results.blackjack', 'Results.dealerBusts', 'Results.dealerWins', 'Results.playerBusts', 'Results.playerWins', 'Results.push', 'balance', 'betSize', and 'reset'. Either include them or remove the dependency array. You can also do a functional update 'setBalance(b => ...)' if you only need 'balance' in the 'setBalance' call.",["93"],{"desc":"94","fix":"95"},{"desc":"96","fix":"97"},{"desc":"98","fix":"99"},{"desc":"100","fix":"101"},{"desc":"102","fix":"103"},{"desc":"104","fix":"105"},"Update the dependencies array to be: [GameState.init, GameState.playerTurn, dealHands, gameState]",{"range":"106","text":"107"},"Update the dependencies array to be: [dealerCount, dealerHand, hiddenCard]",{"range":"108","text":"109"},"Update the dependencies array to be: [playerCount, playerHand]",{"range":"110","text":"111"},"Update the dependencies array to be: [Results.playerBusts, dealerScore, playerCount, playerScore, reset]",{"range":"112","text":"113"},"Update the dependencies array to be: [Deal.dealer, GameState.dealerTurn, Results.dealerBusts, checkWin, dealerCount, dealerScore, drawCard, gameState]",{"range":"114","text":"115"},"Update the dependencies array to be: [Results.blackjack, Results.dealerBusts, Results.dealerWins, Results.playerBusts, Results.playerWins, Results.push, balance, betSize, game, reset]",{"range":"116","text":"117"},[1869,1880],"[GameState.init, GameState.playerTurn, dealHands, gameState]",[2007,2031],"[dealerCount, dealerHand, hiddenCard]",[2139,2151],"[playerCount, playerHand]",[2502,2515],"[Results.playerBusts, dealerScore, playerCount, playerScore, reset]",[2872,2885],"[Deal.dealer, GameState.dealerTurn, Results.dealerBusts, checkWin, dealerCount, dealerScore, drawCard, gameState]",[4342,4348],"[Results.blackjack, Results.dealerBusts, Results.dealerWins, Results.playerBusts, Results.playerWins, Results.push, balance, betSize, game, reset]"]