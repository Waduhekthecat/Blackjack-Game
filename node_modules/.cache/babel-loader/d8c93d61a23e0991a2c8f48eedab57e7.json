{"ast":null,"code":"var _jsxFileName = \"/home/josh/projects/llth-blackjack/blackjack/src/blackjack/Game.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Grid } from \"@mui/material/\";\nimport styledCom from 'styled-components';\nimport Deck from \"./cards/Deck.js\";\nimport Card from \"./cards/Card.js\";\nimport DealCards from \"./cards/DealCards.js\";\nimport Actions from \"./player/Actions.js\";\nimport Scores from \"./UI/Scores.js\";\nimport Visuals from \"./UI/Visuals.js\";\nimport ShowResults from \"./UI/Results.js\"; // Core Game Component\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Game = () => {\n  //   // Initializes and holds game state\n  //   const GameState = {\n  //     bet: 'bet',\n  //     init: 'init',\n  //     playerTurn: 'playerTurn',\n  //     dealerTurn: 'dealerTurn',\n  //   };\n  //   const Deal = {\n  //     player: 'player',\n  //     dealer: 'dealer',\n  //     hidden: 'hidden',\n  //   };\n  //   const Results = {\n  //     blackjack: 'blackjack',\n  //     playerWins: 'playerWins',\n  //     dealerWins: 'dealerWins',\n  //     playerBusts: 'playerBusts',\n  //     dealerBusts: 'dealerBusts',\n  //     push: 'push',\n  //   };\n  //   const [gameState, setGameState] = useState(GameState.bet);\n  //   const [game, setGame] = useState(\"placeBets\");  \n  //   const [balance, setBalance] = useState(1000);\n  //   const [betSize, setBetSize] = useState(0);\n  //   const [deck, setDeck] = useState(Deck);\n  //   const [hiddenCard, setHiddenCard] = useState([]);\n  //   const [dealerHand, setDealerHand] = useState([]);\n  //   const [dealerScore, setDealerScore] = useState(0);\n  //   const [playerHand, setPlayerHand] = useState([]);\n  //   const [playerScore, setPlayerScore] = useState(0);\n  //   const [dealerCount, setDealerCount] = useState(0);\n  //   const [playerCount, setPlayerCount] = useState(0);\n  //   // Handle prev round\n  //   useEffect(() =>  { \n  //     if (gameState === GameState.bet) {\n  //       if (game === Results.blackjack) {\n  //         setBalance(Math.round((balance + (betSize * 3)) * 100) / 100);\n  //       } else\n  //       if (game === Results.playerWins) {\n  //         setBalance(Math.round((balance + (betSize * 2)) * 100) / 100);\n  //       } else\n  //       if (game === Results.push) {\n  //         setBalance(Math.round((balance + (betSize * 1)) * 100) / 100);\n  //       };\n  //     };\n  //   }, [gameState]);\n  //   // Initialize Game\n  //   useEffect(() => {\n  //     if (gameState === GameState.init) {\n  //       dealHands();\n  //       setGameState(GameState.playerTurn); \n  //     }\n  //   }, [gameState]);\n  //   // Update scores\n  //   useEffect(() => {\n  //     calculate(dealerHand, setDealerScore);\n  //     setDealerCount(dealerCount + 1)\n  //   }, [dealerHand, hiddenCard]);\n  //   useEffect(() => {\n  //     calculate(playerHand, setPlayerScore);\n  //     setPlayerCount(playerCount + 1)\n  //   }, [playerHand]);\n  //   // Player turn\n  //   useEffect(() => {\n  //       if (playerCount === 2 &&  playerScore === 21 && dealerScore !==21){\n  //         setGame(Results.blackjack)\n  //         setTimeout(()=> setGameState(GameState.bet), [2000])\n  //       };\n  //       if (playerScore > 21) {\n  //         setGame(Results.playerBusts)\n  //         setTimeout(() => setGameState(GameState.bet), [2000])\n  //       };\n  //   }, [playerCount]);\n  //   // Dealer turn\n  //   useEffect(() => {\n  //     if(gameState === GameState.dealerTurn) {\n  //       if(dealerScore > 21) {\n  //         setGame(Results.dealerBusts);\n  //         setTimeout(() => setGameState(GameState.bet), [2000])\n  //       } else\n  //         if (dealerScore >= 17 && dealerScore <= 21) {\n  //           checkWin();\n  //         }\n  //         else {\n  //           setTimeout(()=>\n  //           drawCard(Deal.dealer), [300])\n  //         }\n  //       }\n  //     }, [dealerCount]);\n  //  // Game functions\n  // const shuffle = () => {\n  //   let newDeck = JSON.parse(JSON.stringify(Deck))\n  //     return (\n  //       setDeck(newDeck)\n  //     )\n  //   };\n  //   const handleClear = () => {\n  //     setBetSize(0)\n  //   };\n  //   const handleMax = () => {\n  //     setBetSize(balance)\n  //   };\n  //   const handleClick = (e) => {\n  //     let value = (e.target.value);\n  //     if (parseInt(betSize)+parseInt(value) > parseInt(balance)){\n  //       alert(\"Not Enough Minerals\");\n  //     } else {\n  //     setBetSize(parseInt(betSize)+parseInt(value))};\n  //   };\n  //   const dealHands = () => {\n  //     setTimeout(() => drawCard(Deal.player), [800])\n  //     setTimeout(() => drawCard(Deal.hidden), [1300])\n  //     setTimeout(() => drawCard(Deal.player), [1800])\n  //     setTimeout(() => drawCard(Deal.dealer), [2300])\n  //     setTimeout(() => setGame(\"inProgress\"), [2800])\n  //   };\n  //   const drawCard = (dealType) => {\n  //     if (deck.length > 5) {\n  //       const randomIndex = Math.floor(Math.random() * deck.length);\n  //       var card = deck[randomIndex];\n  //       deck.splice(randomIndex, 1);\n  //       setDeck([...deck]);\n  //       console.log(card, 'Remaining Cards:', deck.length);\n  //       dealCard(dealType, card)\n  //     }; \n  //     if (deck.length <= 5){\n  //     shuffle();\n  //     dealCard(dealType, card);\n  //     }\n  //   };\n  //   const dealCard = (dealType, card) => {\n  //     switch (dealType) {\n  //       case Deal.player:\n  //         playerHand.push(card);\n  //         setPlayerHand([...playerHand]);\n  //         break;\n  //       case Deal.dealer:\n  //         dealerHand.push(card);\n  //         setDealerHand([...dealerHand]);\n  //         break;\n  //       case Deal.hidden:\n  //         hiddenCard.push(card);\n  //         setHiddenCard([...hiddenCard]);\n  //         break;\n  //       default:\n  //         break;\n  //     }\n  //   };\n  //   const revealCard = () => {\n  //     let hidden = hiddenCard.pop() \n  //     dealerHand.push(hidden)\n  //     setDealerHand([...dealerHand])\n  //   };\n  //   const calculate = (cards, setScore) => {\n  //     let total = 0;\n  //     cards.forEach((card) => {\n  //       if (!card.includes('A')) {\n  //         if (card.includes('K')) {\n  //           total+=10\n  //         } else \n  //         if (card.includes('Q')) {\n  //           total+=10\n  //         } else\n  //         if (card.includes('J')) {\n  //           total+=10\n  //         } else\n  //         if (card.includes('T')) {\n  //           total+=10\n  //         } else {\n  //           total += parseInt(card);\n  //         };\n  //       };\n  //     });\n  //       const aces = cards.filter((card) => {\n  //         return card.includes('A');\n  //       });\n  //       aces.forEach(() => {\n  //         if ((total + 11) > 21) {\n  //           total+=1\n  //         } else \n  //         if ((total + 11) === 21) {\n  //           if (aces.length > 1) {\n  //             total+=1\n  //           } else {\n  //           total+=11\n  //         }\n  //       } else {\n  //           total+=11\n  //         }\n  //     })\n  //     setScore(total);\n  //   };\n  //   // Player actions\n  //   const handleHit = () => {\n  //     drawCard(Deal.player)\n  //   };\n  //   const handleStand = () => {\n  //     revealCard();\n  //     setGameState(GameState.dealerTurn);\n  //   };\n  //   const handleDeal = () => {\n  //     setGameState(GameState.init)\n  //     setBalance(balance - betSize)\n  //   };\n  //   const checkWin = () => {\n  //   if(dealerScore > playerScore) {\n  //     setGame(Results.dealerWins)\n  //   } else\n  //   if(dealerScore < playerScore) {\n  //     setGame(Results.playerWins)\n  //   } else\n  //   if(dealerScore === playerScore) {\n  //     setGame(Results.push)\n  //   };\n  // }\n  //   // Resets game state\n  //   const cleanUp = () => {\n  //     setHiddenCard([]);\n  //     setPlayerHand([]);\n  //     setPlayerScore(0);\n  //     setPlayerCount(0);\n  //     setDealerHand([]);\n  //     setDealerScore(0);\n  //     setDealerCount(0);\n  //     setBetSize(0);\n  //     setGame(\"placeBets\");\n  //     setGameState(GameState.bet)\n  //     };\n  console.table('Dealer: ', dealerHand);\n  console.table('Player: ', playerHand);\n  console.log('dealerScore: ', dealerScore);\n  console.log('playerScore: ', playerScore);\n  console.log('dealerCount: ', dealerCount);\n  console.log('playerCount: ', playerCount);\n  console.log('Game results: ', game);\n  console.log('Game State: ', gameState);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(DealerTitle, {\n      children: \"DEALER\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DealerHand, {\n      children: /*#__PURE__*/_jsxDEV(DealerUl, {\n        children: [hiddenCard.map(card => /*#__PURE__*/_jsxDEV(DealerLi, {\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            card: card,\n            back: true,\n            height: \"150px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 15\n          }, this)\n        }, card, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 13\n        }, this)), dealerHand.map(card => /*#__PURE__*/_jsxDEV(DealerLi, {\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            card: card,\n            height: \"150px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 15\n          }, this)\n        }, card, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DealCards // balance={balance}\n    // betSize={betSize}\n    // gameState={gameState}\n    // GameState={GameState} \n    //   handleDeal={handleDeal}\n    , {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PlayerUI, {\n      children: /*#__PURE__*/_jsxDEV(Actions // game={game}\n      // GameState={GameState}\n      // Results={Results}\n      // dealerHand={dealerHand}\n      // playerScore={playerScore}\n      //   handleStand={handleStand} \n      //   handleHit={handleHit}\n      , {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PlayerHand, {\n      children: /*#__PURE__*/_jsxDEV(PlayerUl, {\n        children: playerHand.map(card => /*#__PURE__*/_jsxDEV(PlayerLi, {\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            card: card,\n            height: \"150px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 15\n          }, this)\n        }, card, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Visuals // game={game}\n    // betSize={betSize}\n    // balance={balance}\n    // playerHand={playerHand}\n    // dealerHand={dealerHand}\n    //   handleClear={handleClear}\n    //   handleMax={handleMax}\n    //   handleClick={handleClick}\n    , {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 264,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Game;\nexport default Game;\nconst PlayerUI = styledCom(Grid).attrs({\n  container: true\n})`\n  position: absolute;\n  height: 200px;\n  bottom:-3%;\n  font-size: 18px;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  text-shadow: 0 0 10px black;\n  z-index: 29;\n  color: white;\n  font-family: \"Play\", sans-serif;\n  -webkit--select: none;\n  \n`; // Styled Bet Components\n// const Spacing = styledCom(Grid).attrs({\n//   item: true,\n// })`\n//   z-index:-10;\n// `;\n// const SetBetSize = styledCom(Grid).attrs({\n//   container: true,\n// })`\n//   position: absolute;\n//   width: 80%;\n//   height: 110px;\n//   margin: 0 auto;\n//   bottom: 1.5%;\n//   display: flex;\n//   color: black;\n//   justify-content: space-evenly;\n//   align-items: center;\n//   z-index: 400;\n// `;\n// const ClearBet = styledCom(Grid).attrs({\n//   item: true,\n// })`\n//    `;\n// const MaxBet = styledCom(Grid).attrs({\n//   item: true,\n// })`\n//    `;\n// const Grid10 = styledCom(Grid).attrs({\n//   item: true,\n// })` \n//   display:absolute;\n//   justifyContent:center;\n//   alignItems:center;\n//   width: 120px;\n//   height: 150px;\n// `;\n// const Grid20 = styledCom(Grid).attrs({\n//   item: true,\n// })` \n//   display:absolute;\n//   justifyContent:center;\n//   alignItems:center;\n//   width: 120px;\n//   height: 150px;\n// `;\n// const Grid50 = styledCom(Grid).attrs({\n//   item: true,\n// })`\n//   display:absolute;\n//   justifyContent:center;\n//   alignItems:center;\n//   width: 120px;\n//   height: 150px;\n// `;\n// const Grid100 = styledCom(Grid).attrs({\n//   item: true,\n// })` \n//   display:absolute;\n//   justifyContent:center;\n//   alignItems:center;\n//   width: 120px;\n//   height: 150px;\n// `;\n// const Bet10 = styledCom(Bet_10)`\n//   transform: scale(1.1);\n//     @media (max-width: 1450px) {\n//       transform: scale(1.0);\n//     }\n//     @media (max-width: 1200px) {\n//       transform: scale(0.9);\n//     }\n// `;\n// const Bet20 = styledCom(Bet_20)`\n//   transform: scale(1.1);  \n//     @media (max-width: 1450px) {\n//       transform: scale(1.0);\n//     }\n//     @media (max-width: 1200px) {\n//       transform: scale(0.9);\n//     }\n// `;\n// const Bet50 = styledCom(Bet_50)`\n//   transform: scale(1.1);  \n//     @media (max-width: 1450px) {\n//       transform: scale(1.0);\n//     }\n//     @media (max-width: 1200px) {\n//       transform: scale(0.9);\n//     }\n// `;\n// const Bet100 = styledCom(Bet_100)`\n//   transform: scale(1.1);\n//     @media (max-width: 1450px) {\n//       transform: scale(1.0);\n//     }\n//     @media (max-width: 1200px) {\n//       transform: scale(0.9);\n//     }\n// `;\n// const PlaceBetBtn = styledCom.button`\n//   transform: scale(1);\n//   background: transparent;\n//   width: 100px;\n//   height: 100px;\n//   outline: none;\n//   color: white;\n//   border: none;\n//   cursor: pointer;\n//   user-select: none;\n//   font-family: \"Play\", sans-serif;\n//   -webkit-user-select: none;\n//     &:hover {\n//         transform: scale(1.1);\n//     }\n//     &:active {\n//         transform: scale(1);\n//     }\n//       @media (max-width: 1450px) {\n//         transform: scale(1.0);\n//       }\n//       @media (max-width: 1200px) {\n//         transform: scale(0.9);\n//       }\n// `;\n// const ClearBtn = styledCom.button`\n//   background: transparent;\n//   outline: none;\n//   border: none;\n//   cursor: pointer;\n//   user-select: none;\n//   font-family: \"Play\", sans-serif;\n//   -webkit-user-select: none;\n//     &:hover {\n//       transform: scale(1.1);\n//     }\n//     &:active {\n//         transform: scale(0.9);\n//     }\n//       @media (max-width: 1450px) {\n//         transform: scale(1.0);\n//       }\n//       @media (max-width: 1200px) {\n//         transform: scale(0.9);\n//       }\n// `;\n// const MaxBetBtn = styledCom.button`\n//   background: transparent;\n//   outline: none;\n//   border: none;\n//   cursor: pointer;\n//   user-select: none;\n//   -webkit-user-select: none;\n//     &:hover {\n//       transform: scale(1.1);\n//     }\n//     &:active {\n//         transform: scale(0.9);\n//     }\n//       @media (max-width: 1450px) {\n//         transform: scale(1.0);\n//       }\n//       @media (max-width: 1200px) {\n//         transform: scale(0.9);\n//       }\n// `;\n// Styled Chips Components\n// const Chip10 = styledCom.img.attrs({\n//   visibility: \"visible\",\n//   src: Svg10,\n// })`\n//   transform: scale(0.7);\n//   position: absolute;\n//   transform: ${(props) =>\n//     props.one === \"0\" ? \"translateY(-0px)\" : \n//     props.one === \"1\" ? \"translateY(-12px)\" : \n//     props.one === \"2\" ? \"translateY(-24px)\" : \n//     \"translateY(-36px)\"};\n//   bottom:-250px;\n//   margin-left:-20px;\n//   z-index: 8;\n// `;\n// const Chip20 = styledCom.img.attrs({\n//   visibility: \"visible\",\n//   src: Svg20,\n// })`transform: scale(0.7);\n//   position: absolute;\n//   transform: ${(props) =>\n//     props.one === \"0\" ? \"translateY(-0px)\" : \n//     props.one === \"1\" ? \"translateY(-12px)\" : \n//     props.one === \"2\" ? \"translateY(-24px)\" : \n//     \"translateY(-36px)\"};\n//   margin-left: -80px;\n//   bottom: -200px;\n//   z-index: 6;\n// `;\n// const Chip50 = styledCom.img.attrs({\n//   visibility: \"visible\",\n//   src: Svg50,\n// })`\n//   transform: scale(0.7);\n//   position: absolute;\n//   transform: \n//     ${(props) =>\n//     props.one === \"0\" ? \"translateY(-0px)\" : \n//     props.one === \"1\" ? \"translateY(-12px)\" : \n//     props.one === \"2\" ? \"translateY(-24px)\" : \n//     \"translateY(-36px)\"};\n//   margin-left: -155px;\n//   bottom: -135px;\n//   z-index: 4;\n// `;\n// const Chip100 = styledCom.img.attrs({\n//   visibility: \"visible\",\n//   src: Svg100,\n// })`\n//   transform: scale(0.7);\n//   position: absolute;\n//   transform: \n//     ${(props) =>\n//     props.one === \"0\" ? \"translateY(-0px)\" : \n//     props.one === \"1\" ? \"translateY(-12px)\" : \n//     props.one === \"2\" ? \"translateY(-24px)\" : \n//   \"translateY(-36px)\"};\n//   margin-left: -240px;\n//   bottom: -45px;\n//   z-index: 2;\n// `;\n// const ChipsArea = styledCom(Grid).attrs({\n//   container: true, spacing: 8,\n// })`\n//   position: absolute;\n//   height:100px;\n//   bottom: 20%;\n//   display: inline-block;\n//   justify-content: center;\n//   align-items: center;\n//   pointer-events: none;\n// `;\n// const PlaceChip10 = styledCom(Grid).attrs({\n//   item: true,\n// })`\n//   width: 100px;\n//   height: 200px;\n// `;\n// const PlaceChip20 = styledCom(Grid).attrs({\n//   item: true,\n// })`\n//   width: 100px;\n//   height: 200px;\n// `;\n// const PlaceChip50 = styledCom(Grid).attrs({\n//   item: true,\n// })`\n//   width: 100px;\n//   height: 200px;\n// `;\n// const PlaceChip100 = styledCom(Grid).attrs({\n//   item: true,\n// })`\n//   width: 100px;\n//   height: 200px;\n// `;\n// Styled Dealer Components\n\n_c2 = PlayerUI;\nconst DealerTitle = styledCom.h1`\nfont: 18px;\ncolor: white;\n`;\n_c3 = DealerTitle;\nconst DealerHand = styledCom.div`\ndisplay: flex;\njustify-content: center;\nposition: absolute;\nheight: 140px;\nwidth: 100%;\ntop: 10%;\n`;\n_c4 = DealerHand;\nconst DealerUl = styledCom.ul`\nlist-style: none;\n`;\n_c5 = DealerUl;\nconst DealerLi = styledCom.li`\ndisplay: inline-block;\nmargin: 0 0 0 -20px;\n`; // Styled Player Components\n\n_c6 = DealerLi;\nconst PlayerHand = styledCom.div`\ndisplay: flex;\njustify-content: center;\nposition: absolute;\nheight: 140px;\nwidth: 100%;\nbottom: 30%;\n`;\n_c7 = PlayerHand;\nconst PlayerUl = styledCom.ul`\nlist-style: none;\n`;\n_c8 = PlayerUl;\nconst PlayerLi = styledCom.li`\ndisplay: inline-block;\nmargin: 0 0 0 -20px;\n`;\n_c9 = PlayerLi;\nconst Container = styledCom.div`\ndisplay:flex;\njustify-content:center;\nposition:absolute;\nheight:100px;\nwidth:100%;\nheight:100%;\n}\n`;\n_c10 = Container;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10;\n\n$RefreshReg$(_c, \"Game\");\n$RefreshReg$(_c2, \"PlayerUI\");\n$RefreshReg$(_c3, \"DealerTitle\");\n$RefreshReg$(_c4, \"DealerHand\");\n$RefreshReg$(_c5, \"DealerUl\");\n$RefreshReg$(_c6, \"DealerLi\");\n$RefreshReg$(_c7, \"PlayerHand\");\n$RefreshReg$(_c8, \"PlayerUl\");\n$RefreshReg$(_c9, \"PlayerLi\");\n$RefreshReg$(_c10, \"Container\");","map":{"version":3,"sources":["/home/josh/projects/llth-blackjack/blackjack/src/blackjack/Game.js"],"names":["React","useState","useEffect","Grid","styledCom","Deck","Card","DealCards","Actions","Scores","Visuals","ShowResults","Game","console","table","dealerHand","playerHand","log","dealerScore","playerScore","dealerCount","playerCount","game","gameState","hiddenCard","map","card","PlayerUI","attrs","container","DealerTitle","h1","DealerHand","div","DealerUl","ul","DealerLi","li","PlayerHand","PlayerUl","PlayerLi","Container"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport { Grid } from \"@mui/material/\";\nimport styledCom from 'styled-components';\n\nimport Deck from \"./cards/Deck.js\";\nimport Card from \"./cards/Card.js\";\nimport DealCards from \"./cards/DealCards.js\";\nimport Actions from \"./player/Actions.js\";\nimport Scores from \"./UI/Scores.js\";\nimport Visuals from \"./UI/Visuals.js\";\nimport ShowResults from \"./UI/Results.js\";\n\n// Core Game Component\nconst Game = () => {\n\n//   // Initializes and holds game state\n//   const GameState = {\n//     bet: 'bet',\n//     init: 'init',\n//     playerTurn: 'playerTurn',\n//     dealerTurn: 'dealerTurn',\n//   };\n//   const Deal = {\n//     player: 'player',\n//     dealer: 'dealer',\n//     hidden: 'hidden',\n//   };\n//   const Results = {\n//     blackjack: 'blackjack',\n//     playerWins: 'playerWins',\n//     dealerWins: 'dealerWins',\n//     playerBusts: 'playerBusts',\n//     dealerBusts: 'dealerBusts',\n//     push: 'push',\n//   };\n\n//   const [gameState, setGameState] = useState(GameState.bet);\n//   const [game, setGame] = useState(\"placeBets\");  \n//   const [balance, setBalance] = useState(1000);\n//   const [betSize, setBetSize] = useState(0);\n//   const [deck, setDeck] = useState(Deck);\n//   const [hiddenCard, setHiddenCard] = useState([]);\n//   const [dealerHand, setDealerHand] = useState([]);\n//   const [dealerScore, setDealerScore] = useState(0);\n//   const [playerHand, setPlayerHand] = useState([]);\n//   const [playerScore, setPlayerScore] = useState(0);\n//   const [dealerCount, setDealerCount] = useState(0);\n//   const [playerCount, setPlayerCount] = useState(0);\n  \n//   // Handle prev round\n//   useEffect(() =>  { \n//     if (gameState === GameState.bet) {\n//       if (game === Results.blackjack) {\n//         setBalance(Math.round((balance + (betSize * 3)) * 100) / 100);\n//       } else\n//       if (game === Results.playerWins) {\n//         setBalance(Math.round((balance + (betSize * 2)) * 100) / 100);\n//       } else\n//       if (game === Results.push) {\n//         setBalance(Math.round((balance + (betSize * 1)) * 100) / 100);\n//       };\n//     };\n//   }, [gameState]);\n\n//   // Initialize Game\n//   useEffect(() => {\n//     if (gameState === GameState.init) {\n//       dealHands();\n//       setGameState(GameState.playerTurn); \n//     }\n//   }, [gameState]);\n\n//   // Update scores\n//   useEffect(() => {\n//     calculate(dealerHand, setDealerScore);\n//     setDealerCount(dealerCount + 1)\n//   }, [dealerHand, hiddenCard]);\n\n//   useEffect(() => {\n//     calculate(playerHand, setPlayerScore);\n//     setPlayerCount(playerCount + 1)\n//   }, [playerHand]);\n\n//   // Player turn\n//   useEffect(() => {\n//       if (playerCount === 2 &&  playerScore === 21 && dealerScore !==21){\n//         setGame(Results.blackjack)\n//         setTimeout(()=> setGameState(GameState.bet), [2000])\n//       };\n//       if (playerScore > 21) {\n//         setGame(Results.playerBusts)\n//         setTimeout(() => setGameState(GameState.bet), [2000])\n//       };\n//   }, [playerCount]);\n\n//   // Dealer turn\n//   useEffect(() => {\n//     if(gameState === GameState.dealerTurn) {\n//       if(dealerScore > 21) {\n//         setGame(Results.dealerBusts);\n//         setTimeout(() => setGameState(GameState.bet), [2000])\n//       } else\n//         if (dealerScore >= 17 && dealerScore <= 21) {\n//           checkWin();\n//         }\n//         else {\n//           setTimeout(()=>\n//           drawCard(Deal.dealer), [300])\n//         }\n//       }\n//     }, [dealerCount]);\n\n\n//  // Game functions\n// const shuffle = () => {\n//   let newDeck = JSON.parse(JSON.stringify(Deck))\n//     return (\n//       setDeck(newDeck)\n//     )\n//   };\n//   const handleClear = () => {\n//     setBetSize(0)\n//   };\n//   const handleMax = () => {\n//     setBetSize(balance)\n//   };\n//   const handleClick = (e) => {\n//     let value = (e.target.value);\n//     if (parseInt(betSize)+parseInt(value) > parseInt(balance)){\n//       alert(\"Not Enough Minerals\");\n//     } else {\n//     setBetSize(parseInt(betSize)+parseInt(value))};\n//   };\n//   const dealHands = () => {\n//     setTimeout(() => drawCard(Deal.player), [800])\n//     setTimeout(() => drawCard(Deal.hidden), [1300])\n//     setTimeout(() => drawCard(Deal.player), [1800])\n//     setTimeout(() => drawCard(Deal.dealer), [2300])\n//     setTimeout(() => setGame(\"inProgress\"), [2800])\n//   };\n//   const drawCard = (dealType) => {\n//     if (deck.length > 5) {\n//       const randomIndex = Math.floor(Math.random() * deck.length);\n//       var card = deck[randomIndex];\n//       deck.splice(randomIndex, 1);\n//       setDeck([...deck]);\n//       console.log(card, 'Remaining Cards:', deck.length);\n//       dealCard(dealType, card)\n//     }; \n//     if (deck.length <= 5){\n//     shuffle();\n//     dealCard(dealType, card);\n//     }\n//   };\n//   const dealCard = (dealType, card) => {\n//     switch (dealType) {\n//       case Deal.player:\n//         playerHand.push(card);\n//         setPlayerHand([...playerHand]);\n//         break;\n//       case Deal.dealer:\n//         dealerHand.push(card);\n//         setDealerHand([...dealerHand]);\n//         break;\n//       case Deal.hidden:\n//         hiddenCard.push(card);\n//         setHiddenCard([...hiddenCard]);\n//         break;\n//       default:\n//         break;\n//     }\n//   };\n//   const revealCard = () => {\n//     let hidden = hiddenCard.pop() \n//     dealerHand.push(hidden)\n//     setDealerHand([...dealerHand])\n//   };\n//   const calculate = (cards, setScore) => {\n//     let total = 0;\n//     cards.forEach((card) => {\n//       if (!card.includes('A')) {\n//         if (card.includes('K')) {\n//           total+=10\n//         } else \n//         if (card.includes('Q')) {\n//           total+=10\n//         } else\n//         if (card.includes('J')) {\n//           total+=10\n//         } else\n//         if (card.includes('T')) {\n//           total+=10\n//         } else {\n//           total += parseInt(card);\n//         };\n//       };\n//     });\n//       const aces = cards.filter((card) => {\n//         return card.includes('A');\n//       });\n//       aces.forEach(() => {\n//         if ((total + 11) > 21) {\n//           total+=1\n//         } else \n//         if ((total + 11) === 21) {\n//           if (aces.length > 1) {\n//             total+=1\n//           } else {\n//           total+=11\n//         }\n//       } else {\n//           total+=11\n//         }\n//     })\n//     setScore(total);\n//   };\n//   // Player actions\n//   const handleHit = () => {\n//     drawCard(Deal.player)\n//   };\n//   const handleStand = () => {\n//     revealCard();\n//     setGameState(GameState.dealerTurn);\n//   };\n//   const handleDeal = () => {\n//     setGameState(GameState.init)\n//     setBalance(balance - betSize)\n//   };\n//   const checkWin = () => {\n//   if(dealerScore > playerScore) {\n//     setGame(Results.dealerWins)\n//   } else\n//   if(dealerScore < playerScore) {\n//     setGame(Results.playerWins)\n//   } else\n//   if(dealerScore === playerScore) {\n//     setGame(Results.push)\n//   };\n// }\n//   // Resets game state\n//   const cleanUp = () => {\n//     setHiddenCard([]);\n//     setPlayerHand([]);\n//     setPlayerScore(0);\n//     setPlayerCount(0);\n//     setDealerHand([]);\n//     setDealerScore(0);\n//     setDealerCount(0);\n//     setBetSize(0);\n//     setGame(\"placeBets\");\n//     setGameState(GameState.bet)\n//     };\n  \n    console.table('Dealer: ', dealerHand)\n    console.table('Player: ', playerHand)\n    console.log('dealerScore: ', dealerScore)\n    console.log('playerScore: ', playerScore)\n    console.log('dealerCount: ', dealerCount)\n    console.log('playerCount: ', playerCount)\n    console.log('Game results: ', game)\n    console.log('Game State: ', gameState)\n\n  return (\n    <Container>\n      <DealerTitle>DEALER</DealerTitle>\n      <DealerHand>\n        <DealerUl>\n          {hiddenCard.map(card =>\n            <DealerLi key={card}>\n              <Card card={card} back={true} height=\"150px\"/>\n            </DealerLi>)}\n          {dealerHand.map(card =>\n            <DealerLi key={card}>\n              <Card card={card} height=\"150px\"/>\n            </DealerLi>)}\n        </DealerUl>\n      </DealerHand>\n      <DealCards \n        // balance={balance}\n        // betSize={betSize}\n        // gameState={gameState}\n        // GameState={GameState} \n        //   handleDeal={handleDeal}\n          />\n      <PlayerUI>\n        {/* <ShowResults \n          game={game} \n          Results={Results}\n          GameState={GameState}\n            setGameState={setGameState}/> */}\n        <Actions\n          // game={game}\n          // GameState={GameState}\n          // Results={Results}\n          // dealerHand={dealerHand}\n          // playerScore={playerScore}\n          //   handleStand={handleStand} \n          //   handleHit={handleHit}\n            />\n      </PlayerUI>\n      <PlayerHand>\n        <PlayerUl>\n          {playerHand.map(card => \n            <PlayerLi key={card}>\n              <Card card={card} height=\"150px\"/>\n            </PlayerLi>)}\n        </PlayerUl>\n      </PlayerHand>\n      {/* <Scores \n        gameState={gameState}\n        GameState={GameState}\n        playerScore={playerScore}\n        dealerScore={dealerScore}/> */}\n      <Visuals \n        // game={game}\n        // betSize={betSize}\n        // balance={balance}\n        // playerHand={playerHand}\n        // dealerHand={dealerHand}\n        //   handleClear={handleClear}\n        //   handleMax={handleMax}\n        //   handleClick={handleClick}\n          /> \n    </Container>\n  )\n};\n\nexport default Game;\n\n\n\nconst PlayerUI = styledCom(Grid).attrs({\n  container: true,\n})`\n  position: absolute;\n  height: 200px;\n  bottom:-3%;\n  font-size: 18px;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  text-shadow: 0 0 10px black;\n  z-index: 29;\n  color: white;\n  font-family: \"Play\", sans-serif;\n  -webkit--select: none;\n  \n`;\n\n\n// Styled Bet Components\n\n// const Spacing = styledCom(Grid).attrs({\n//   item: true,\n// })`\n//   z-index:-10;\n// `;\n\n// const SetBetSize = styledCom(Grid).attrs({\n//   container: true,\n// })`\n//   position: absolute;\n//   width: 80%;\n//   height: 110px;\n//   margin: 0 auto;\n//   bottom: 1.5%;\n//   display: flex;\n//   color: black;\n//   justify-content: space-evenly;\n//   align-items: center;\n//   z-index: 400;\n// `;\n\n// const ClearBet = styledCom(Grid).attrs({\n//   item: true,\n// })`\n//    `;\n\n// const MaxBet = styledCom(Grid).attrs({\n//   item: true,\n// })`\n//    `;\n\n// const Grid10 = styledCom(Grid).attrs({\n//   item: true,\n// })` \n//   display:absolute;\n//   justifyContent:center;\n//   alignItems:center;\n//   width: 120px;\n//   height: 150px;\n// `;\n\n// const Grid20 = styledCom(Grid).attrs({\n//   item: true,\n// })` \n//   display:absolute;\n//   justifyContent:center;\n//   alignItems:center;\n//   width: 120px;\n//   height: 150px;\n// `;\n// const Grid50 = styledCom(Grid).attrs({\n//   item: true,\n// })`\n//   display:absolute;\n//   justifyContent:center;\n//   alignItems:center;\n//   width: 120px;\n//   height: 150px;\n// `;\n\n// const Grid100 = styledCom(Grid).attrs({\n//   item: true,\n// })` \n//   display:absolute;\n//   justifyContent:center;\n//   alignItems:center;\n//   width: 120px;\n//   height: 150px;\n// `;\n\n// const Bet10 = styledCom(Bet_10)`\n//   transform: scale(1.1);\n//     @media (max-width: 1450px) {\n//       transform: scale(1.0);\n//     }\n//     @media (max-width: 1200px) {\n//       transform: scale(0.9);\n//     }\n// `;\n\n// const Bet20 = styledCom(Bet_20)`\n//   transform: scale(1.1);  \n//     @media (max-width: 1450px) {\n//       transform: scale(1.0);\n//     }\n//     @media (max-width: 1200px) {\n//       transform: scale(0.9);\n//     }\n// `;\n\n// const Bet50 = styledCom(Bet_50)`\n//   transform: scale(1.1);  \n//     @media (max-width: 1450px) {\n//       transform: scale(1.0);\n//     }\n//     @media (max-width: 1200px) {\n//       transform: scale(0.9);\n//     }\n// `;\n\n// const Bet100 = styledCom(Bet_100)`\n//   transform: scale(1.1);\n//     @media (max-width: 1450px) {\n//       transform: scale(1.0);\n//     }\n//     @media (max-width: 1200px) {\n//       transform: scale(0.9);\n//     }\n// `;\n\n// const PlaceBetBtn = styledCom.button`\n//   transform: scale(1);\n//   background: transparent;\n//   width: 100px;\n//   height: 100px;\n//   outline: none;\n//   color: white;\n//   border: none;\n//   cursor: pointer;\n//   user-select: none;\n//   font-family: \"Play\", sans-serif;\n//   -webkit-user-select: none;\n//     &:hover {\n//         transform: scale(1.1);\n//     }\n//     &:active {\n//         transform: scale(1);\n//     }\n//       @media (max-width: 1450px) {\n//         transform: scale(1.0);\n//       }\n//       @media (max-width: 1200px) {\n//         transform: scale(0.9);\n//       }\n// `;\n\n// const ClearBtn = styledCom.button`\n//   background: transparent;\n//   outline: none;\n//   border: none;\n//   cursor: pointer;\n//   user-select: none;\n//   font-family: \"Play\", sans-serif;\n//   -webkit-user-select: none;\n//     &:hover {\n//       transform: scale(1.1);\n//     }\n//     &:active {\n//         transform: scale(0.9);\n//     }\n\n//       @media (max-width: 1450px) {\n//         transform: scale(1.0);\n//       }\n//       @media (max-width: 1200px) {\n//         transform: scale(0.9);\n//       }\n// `;\n// const MaxBetBtn = styledCom.button`\n//   background: transparent;\n//   outline: none;\n//   border: none;\n//   cursor: pointer;\n//   user-select: none;\n//   -webkit-user-select: none;\n//     &:hover {\n//       transform: scale(1.1);\n//     }\n//     &:active {\n//         transform: scale(0.9);\n//     }\n//       @media (max-width: 1450px) {\n//         transform: scale(1.0);\n//       }\n//       @media (max-width: 1200px) {\n//         transform: scale(0.9);\n//       }\n// `;\n\n// Styled Chips Components\n\n// const Chip10 = styledCom.img.attrs({\n//   visibility: \"visible\",\n//   src: Svg10,\n// })`\n//   transform: scale(0.7);\n//   position: absolute;\n//   transform: ${(props) =>\n//     props.one === \"0\" ? \"translateY(-0px)\" : \n//     props.one === \"1\" ? \"translateY(-12px)\" : \n//     props.one === \"2\" ? \"translateY(-24px)\" : \n//     \"translateY(-36px)\"};\n//   bottom:-250px;\n//   margin-left:-20px;\n//   z-index: 8;\n// `;\n\n// const Chip20 = styledCom.img.attrs({\n//   visibility: \"visible\",\n//   src: Svg20,\n// })`transform: scale(0.7);\n//   position: absolute;\n//   transform: ${(props) =>\n//     props.one === \"0\" ? \"translateY(-0px)\" : \n//     props.one === \"1\" ? \"translateY(-12px)\" : \n//     props.one === \"2\" ? \"translateY(-24px)\" : \n//     \"translateY(-36px)\"};\n//   margin-left: -80px;\n//   bottom: -200px;\n//   z-index: 6;\n// `;\n\n// const Chip50 = styledCom.img.attrs({\n//   visibility: \"visible\",\n//   src: Svg50,\n// })`\n//   transform: scale(0.7);\n//   position: absolute;\n//   transform: \n//     ${(props) =>\n//     props.one === \"0\" ? \"translateY(-0px)\" : \n//     props.one === \"1\" ? \"translateY(-12px)\" : \n//     props.one === \"2\" ? \"translateY(-24px)\" : \n//     \"translateY(-36px)\"};\n//   margin-left: -155px;\n//   bottom: -135px;\n//   z-index: 4;\n// `;\n\n// const Chip100 = styledCom.img.attrs({\n//   visibility: \"visible\",\n//   src: Svg100,\n// })`\n//   transform: scale(0.7);\n//   position: absolute;\n//   transform: \n//     ${(props) =>\n//     props.one === \"0\" ? \"translateY(-0px)\" : \n//     props.one === \"1\" ? \"translateY(-12px)\" : \n//     props.one === \"2\" ? \"translateY(-24px)\" : \n//   \"translateY(-36px)\"};\n//   margin-left: -240px;\n//   bottom: -45px;\n//   z-index: 2;\n// `;\n\n// const ChipsArea = styledCom(Grid).attrs({\n//   container: true, spacing: 8,\n// })`\n//   position: absolute;\n//   height:100px;\n//   bottom: 20%;\n//   display: inline-block;\n//   justify-content: center;\n//   align-items: center;\n//   pointer-events: none;\n// `;\n\n// const PlaceChip10 = styledCom(Grid).attrs({\n//   item: true,\n// })`\n//   width: 100px;\n//   height: 200px;\n// `;\n\n// const PlaceChip20 = styledCom(Grid).attrs({\n//   item: true,\n// })`\n//   width: 100px;\n//   height: 200px;\n// `;\n\n// const PlaceChip50 = styledCom(Grid).attrs({\n//   item: true,\n// })`\n//   width: 100px;\n//   height: 200px;\n// `;\n\n// const PlaceChip100 = styledCom(Grid).attrs({\n//   item: true,\n// })`\n//   width: 100px;\n//   height: 200px;\n// `;\n\n\n\n\n// Styled Dealer Components\nconst DealerTitle = styledCom.h1`\nfont: 18px;\ncolor: white;\n`;\n\nconst DealerHand = styledCom.div`\ndisplay: flex;\njustify-content: center;\nposition: absolute;\nheight: 140px;\nwidth: 100%;\ntop: 10%;\n`;\n\nconst DealerUl = styledCom.ul`\nlist-style: none;\n`;\n\nconst DealerLi = styledCom.li`\ndisplay: inline-block;\nmargin: 0 0 0 -20px;\n`;\n\n// Styled Player Components\n\nconst PlayerHand = styledCom.div`\ndisplay: flex;\njustify-content: center;\nposition: absolute;\nheight: 140px;\nwidth: 100%;\nbottom: 30%;\n`;\n\nconst PlayerUl = styledCom.ul`\nlist-style: none;\n`;\n\nconst PlayerLi = styledCom.li`\ndisplay: inline-block;\nmargin: 0 0 0 -20px;\n`;\n\nconst Container = styledCom.div`\ndisplay:flex;\njustify-content:center;\nposition:absolute;\nheight:100px;\nwidth:100%;\nheight:100%;\n}\n`;\n"]},"metadata":{},"sourceType":"module"}